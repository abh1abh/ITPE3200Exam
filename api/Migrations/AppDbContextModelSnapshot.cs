// <auto-generated />
using System;
using HomecareAppointmentManagement.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("HomecareAppointmentManagement.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AvailableSlotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthcareWorkerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AvailableSlotId")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.HasIndex("HealthcareWorkerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.AppointmentTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentTasks");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.AvailableSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthcareWorkerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HealthcareWorkerId");

                    b.ToTable("AvailableSlots");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppointmentId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("AppointmentId1");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.HealthcareWorker", b =>
                {
                    b.Property<int>("HealthcareWorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("HealthcareWorkerId");

                    b.ToTable("HealthcareWorkers");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.Appointment", b =>
                {
                    b.HasOne("HomecareAppointmentManagement.Models.AvailableSlot", "AvailableSlot")
                        .WithOne("Appointment")
                        .HasForeignKey("HomecareAppointmentManagement.Models.Appointment", "AvailableSlotId");

                    b.HasOne("HomecareAppointmentManagement.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomecareAppointmentManagement.Models.HealthcareWorker", "HealthcareWorker")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthcareWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailableSlot");

                    b.Navigation("Client");

                    b.Navigation("HealthcareWorker");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.AppointmentTask", b =>
                {
                    b.HasOne("HomecareAppointmentManagement.Models.Appointment", "Appointment")
                        .WithMany("AppointmentTasks")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.AvailableSlot", b =>
                {
                    b.HasOne("HomecareAppointmentManagement.Models.HealthcareWorker", "HealthcareWorker")
                        .WithMany("AvailableSlots")
                        .HasForeignKey("HealthcareWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthcareWorker");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.ChangeLog", b =>
                {
                    b.HasOne("HomecareAppointmentManagement.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HomecareAppointmentManagement.Models.Appointment", null)
                        .WithMany("ChangeLogs")
                        .HasForeignKey("AppointmentId1");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentTasks");

                    b.Navigation("ChangeLogs");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.AvailableSlot", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.Client", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HomecareAppointmentManagement.Models.HealthcareWorker", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AvailableSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
